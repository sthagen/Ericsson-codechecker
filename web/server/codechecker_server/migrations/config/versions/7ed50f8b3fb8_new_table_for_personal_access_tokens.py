"""
New table for personal access tokens

Revision ID: 7ed50f8b3fb8
Revises:     04cd4df82fb5
Create Date: 2025-04-16 01:30:51.254244
"""

from datetime import datetime, timedelta
from logging import getLogger

from alembic import op
import sqlalchemy as sa


# Revision identifiers, used by Alembic.
revision = '7ed50f8b3fb8'
down_revision = '04cd4df82fb5'
branch_labels = None
depends_on = None


def upgrade():
    LOG = getLogger("migration/config")
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        'personal_access_tokens',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('user_name', sa.String(), nullable=True),
        sa.Column('token_name', sa.String(), nullable=True),
        sa.Column('token', sa.CHAR(length=32), nullable=False),
        sa.Column('description', sa.String(), nullable=True),
        sa.Column('groups', sa.String(), nullable=True),
        sa.Column('last_access', sa.DateTime(), nullable=False),
        sa.Column('expiration', sa.DateTime(), nullable=True),
        sa.Column('auth_session_id', sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ['auth_session_id'],
            ['auth_sessions.id'],
            name=op.f(
                'fk_personal_access_tokens_auth_session_id_auth_sessions'),
            ondelete='SET NULL'),
        sa.PrimaryKeyConstraint(
            'id',
            name=op.f('pk_personal_access_tokens')),
        sa.UniqueConstraint(
            'token',
            name=op.f('uq_personal_access_tokens_token')),
        sa.UniqueConstraint(
            'user_name',
            'token_name', name=op.f('uq_personal_access_tokens_user_name'))
    )

    one_year_later = datetime.now() + timedelta(days=365)

    dialect = op.get_context().dialect.name

    if dialect == "sqlite":
        random_string = "hex(randomblob(4))"
    else:
        random_string = "substr(md5(random()::text), 1, 8)"

    op.execute(
        f"""
        INSERT INTO personal_access_tokens (user_name, token_name, token,
            description, last_access, expiration, auth_session_id)
        SELECT user_name, {random_string}, token, description, last_access,
            '{one_year_later}', id
        FROM auth_sessions
        WHERE can_expire = false
        """)
    # ### end Alembic commands ###


def downgrade():
    LOG = getLogger("migration/config")
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('personal_access_tokens')
    # ### end Alembic commands ###
