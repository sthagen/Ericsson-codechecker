name: checker-config-coverage

on:
  push:
    paths:
      - '.github/workflow/config_coverage.yml'
      - '.github/workflow/config_label_check.py'
      - 'config/labels/analyzers/clang-tidy.json'
      - 'config/labels/analyzers/clangsa.json'
  pull_request:
    paths:
      - '.github/workflow/config_coverage.yml'
      - '.github/workflow/config_label_check.py'
      - 'config/labels/analyzers/clang-tidy.json'
      - 'config/labels/analyzers/clangsa.json'
  schedule:
    # Run every Sunday at 21:30 (to latest master at that time).
    - cron: '30 21 * * SUN'
  # Allow running this job manually from either API or GitHub UI.
  workflow_dispatch:

jobs:
  checker-config-coverage:
    name: "Config coverage of checkers"
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      - name: "Install dependencies"
        run: |
          sudo apt-get -qy update
          sudo apt-get -y --no-install-recommends install \
            build-essential \
            curl            \
            gcc-multilib    \
            python3-dev     \
            python3-venv
      - name: "Get latest LLVM binary package from the community PPA"
        run: |
          export DISTRO_FANCYNAME="$(lsb_release -c | awk '{ print $2 }')"

          echo "::group::Setup LLVM PPA"
          curl -sL http://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
          sudo add-apt-repository -y "deb http://apt.llvm.org/$DISTRO_FANCYNAME/ llvm-toolchain-$DISTRO_FANCYNAME main"
          echo "::endgroup::"

          # Get the largest Clang package number available.
          export LLVM_VER="$(apt-cache search --full 'clang-[[:digit:]]*$' | grep '^Package: clang' | cut -d ' ' -f 2 | sort -V | tail -n 1 | sed 's/clang-//')"
          echo "::group::Install Clang and Clang-Tidy version ${LLVM_VER}"
          sudo apt-get -y --no-install-recommends install \
            clang-$LLVM_VER      \
            clang-tidy-$LLVM_VER
          sudo update-alternatives --install                   \
            /usr/bin/clang clang /usr/bin/clang-$LLVM_VER 1000 \
            --slave                                            \
              /usr/bin/clang-tidy clang-tidy /usr/bin/clang-tidy-$LLVM_VER
          echo "::endgroup::"

          echo "Installed Clang:"
          update-alternatives --query clang
      - name: "Package CodeChecker"
        id: codechecker
        run: |
          pushd analyzer

          echo "::group::venv"
          make venv
          source venv/bin/activate
          echo "::endgroup::"

          echo "::group::CodeChecker package"
          make standalone_package
          deactivate
          echo "::endgroup::"

          echo "::set-output name=CODECHECKER_PATH::$(readlink -f ./build/CodeChecker/bin)"
          popd # analyzer
      - name: "Dump checker list"
        run: |
          export PATH="${{ steps.codechecker.outputs.CODECHECKER_PATH }}:$PATH"
          CodeChecker analyzers --details
          CodeChecker checkers \
            --analyzer clangsa clang-tidy \
            --output rows \
              > checker_list_normal.txt
          CodeChecker checkers \
            --analyzer clangsa clang-tidy \
            --warnings \
            --output rows \
              > checker_list_diagnostics.txt
      - name: "Perform checker config coverage check (--warnings)"
        continue-on-error: true
        run: |
          set +e # Do not hard exit on an erroring call!
          .github/workflows/config_label_check.py \
            "checker_list_diagnostics.txt" \
            "config/labels/analyzers/clangsa.json" \
            "config/labels/analyzers/clang-tidy.json" \
            --existing-filter "clang-diagnostic-" \
            --new-filter "clang-diagnostic-"
          EXIT_STATUS=$?
          echo "Coverage check returned: $EXIT_STATUS."
          # Explicitly check if the bit for "8" is set in the result,
          # indicating new checkers without severity set.
          if [[ $(($EXIT_STATUS & 8)) -eq 8 ]]
          then
            echo "::warning title=New unconfigured diagnostics::The checker label config files lack some new diagnostic report (\"warning\") kinds."
            exit 0
          elif [[ $EXIT_STATUS -eq 1 || $EXIT_STATUS -eq 2 ]]
          then
            # Script execution error.
            exit $EXIT_STATUS
          else
            # We do not wish to fail if only removed checkers are reported.
            exit 0
          fi
      - name: "Perform checker config coverage check"
        run: |
          set +e # Do not hard exit on an erroring call!
          .github/workflows/config_label_check.py \
            "checker_list_normal.txt" \
            "config/labels/analyzers/clangsa.json" \
            "config/labels/analyzers/clang-tidy.json" \
            --existing-ignore "clang-diagnostic-" \
            --new-ignore \
              "clang-diagnostic-" \
              "alpha." \
              "apiModeling." \
              "debug." \
              "optin.osx." \
              "osx." \
              "darwin-" \
              "objc-"
          EXIT_STATUS=$?
          echo "Coverage check returned: $EXIT_STATUS."
          # Explicitly check if the bit for "8" is set in the result,
          # indicating new checkers without severity set.
          if [[ $(($EXIT_STATUS & 8)) -eq 8 ]]
          then
            exit 8
          elif [[ $EXIT_STATUS -eq 1 || $EXIT_STATUS -eq 2 ]]
          then
            # Script execution error.
            exit $EXIT_STATUS
          else
            # We do not wish to fail if only removed checkers are reported.
            exit 0
          fi
